pragma solidity ^0.4.0;
pragma experimental ABIEncoderV2; // for the getter function using multiple arrays

//returns the owner of the contract
contract Owned {
    address owner;
    constructor() public payable {
        owner = msg.sender;
    }
}

/*
//generates the passcode in bytes32
contract genPasscode {
    bytes32 passcode;
    constructor(uint employeeID) public payable{
    passcode  = bytes32(keccak256(abi.encodePacked(employeeID)));
    }
    
   function setPasscode(uint employeeID) pure public returns (bytes32) {
        bytes32 passcode = bytes32(keccak256(abi.encodePacked(employeeID)));
        return passcode;
    }
} */

//the main contract to create the employees
contract Main is Owned {
    
    uint numEmpDetails=1;
    
    struct EmpDetail {
        uint employeeID;    //system generated
        string empName;
        bytes16 emailID;
        bytes32 passcode;
        uint emp_c;
        address empAddr;
    }
    
    mapping(uint => EmpDetail) Employees;
    
    EmpDetail[] EmpDetails;
    uint public EmpIDs;
    string public EmpNames;
    address public EmpAddrs;
    
    event AddedEmployee(uint employeeID, string empName, address thisAddress, bytes32 passcode);
    //event AddressOfZero(address[] hr_address);
    
    modifier validEmp(bytes32 passcode, uint employeeID) {
        require(
            passcode == Employees[employeeID].passcode,
            "Invalid Passcode."
        );
        _;
    }
    
    //function to create employees
    function createEmployee() public {
        Employees[numEmpDetails+1].emp_c = numEmpDetails+1;
        EmpDetails.push(Employees[numEmpDetails+1]);
    }
    
    //function to add employees details
    function addEmpDetails(string name, bytes16 emailID) public payable {
        uint employeeID = numEmpDetails++;
        bytes32 passcode;
        passcode  = bytes32(keccak256(abi.encodePacked(employeeID)));
        EmpDetail storage empl = Employees[employeeID];
        
        empl.empName = name;
        empl.emailID = emailID;
        empl.empAddr = address(this);
        
        EmpDetails.push(Employees[employeeID]) -1;
        //EmpIDs.push(employeeID) -1;
        //EmpNames.push(name) -1;
        //EmpAddrs.push(address(this));
        
        
        //Trigger the event
        emit AddedEmployee(employeeID, name, address(this), passcode);
    }
    
    // returns employee information pragma experimantal style
    /*function getEmployee(uint employeeID) view external returns (uint[], string[], address[]) {
        return (Employees[employeeID].employeeID,Employees[employeeID].empName, Employees[employeeID].allowEmployees);
    }*/
    
    //returns unique employee details
    function getEmployee(uint EmployeeID) view external returns (uint, string, address) {
        return (Employees[EmployeeID].employeeID, Employees[EmployeeID].empName, Employees[EmployeeID].empAddr);
    }
    
    //returns all Employees
    function getEmployees() view public returns (uint, string, address){
            return (EmpIDs, EmpNames, EmpAddrs)  ;
    }
}
