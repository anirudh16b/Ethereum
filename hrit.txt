pragma solidity ^0.4.0;
pragma experimental ABIEncoderV2; // for the getter function using multiple arrays

contract Owned {
    address owner;
    
    function owned() public payable {
        owner = msg.sender;
    }
        
    modifier isOwner {
        require(msg.sender == owner);
        _;
    }
}

contract genPasscode {
    function setPasscode(uint employeeID) pure public returns (bytes10) {//doesn't read/modify state variable
        bytes10 passcode = bytes10(keccak256(abi.encodePacked(employeeID)));
        return passcode;
    }
} 

contract Main {

    uint numEmpDetails=1;
   
    struct EmpDetail  {
        uint employeeID;    //system generated
        string empName;
        bytes16 emailID;
        bytes10 passcode;
        string govID;
        uint emp_c;
        address empAddr;
    }
    
    mapping(uint => EmpDetail) Employees;
    
    EmpDetail[] EmpDetails;
    uint[] public EmpIDs;
    string[] public EmpNames;
    address[] public EmpAddrs;
    
    event AddedEmployee(uint employeeID, string empName, address thisAddress, bytes10 passcode);
    
    //function to create employees
    function createEmployee() external {
        Employees[numEmpDetails+1].emp_c = numEmpDetails+1;
        EmpDetails.push(Employees[numEmpDetails+1]);
    }
    
    //function to add employees details
    function addEmpDetails(string name, bytes16 emailID) external {
        uint employeeID = numEmpDetails++;
        Owned l_owner;
        l_owner = new Owned();
        genPasscode gpc;
        gpc = new genPasscode();
        bytes10 passcode =  gpc.setPasscode(employeeID);
        EmpDetail storage empl = Employees[employeeID];
        
        empl.empName = name;
        empl.emailID = emailID;
        empl.empAddr = address(this);
        empl.passcode = passcode;
        
        EmpDetails.push(Employees[employeeID]) -1;
        EmpIDs.push(employeeID) -1;
        EmpNames.push(name) -1;
        EmpAddrs.push(address(this));
        
        
        //Trigger the event
        emit AddedEmployee(employeeID, name, address(this), passcode);
    }
    
    // returns employee information pragma experimantal style
    /*function getEmployee(uint employeeID) view external returns (uint[], string[], address[]) {
        return (Employees[employeeID].employeeID,Employees[employeeID].empName, Employees[employeeID].allowEmployees);
    }*/
    
}

contract getDetails is Owned, Main {
        //returns unique employee details
    function getEmployee(uint EmployeeID) isOwner() view external returns (uint, string, address, bytes10) {
        return (Employees[EmployeeID].employeeID, Employees[EmployeeID].empName, Employees[EmployeeID].empAddr, Employees[EmployeeID].passcode);
    }
    
    //returns all Employees
    function getEmployees() view public returns (uint[], string[], address[]){
            return (EmpIDs, EmpNames, EmpAddrs)  ;
    }
}

contract AddEmpPrivateDetails is Main {
    
    modifier validEmp(bytes10 passcode, uint employeeID) {
        require(
            passcode == Employees[employeeID].passcode,
            "Invalid Passcode."
        );
        _;
    }
    
    Main main = new Main();
    
    function verifyAddEmp(bytes10 passcode, uint employeeID, string govID) validEmp(passcode, employeeID) public {
            Employees[employeeID].govID = govID;
        }
            
    
}
